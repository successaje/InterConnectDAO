type voteResult = 
 variant {
   err: VoteErr;
   ok: VoteOk;
 };
type VoteOk = 
 variant {
   ProposalAccepted;
   ProposalOpen;
   ProposalRefused;
 };
type VoteErr = 
 variant {
   AlreadyVoted;
   NotDAOMember;
   NotEnoughTokens;
   ProposalEnded;
   ProposalNotFound;
 };
type UserType = 
 variant {
   Org;
   Reg;
 };
type Subaccount = blob;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Status = 
 variant {
   Accepted;
   Open;
   Rejected;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Member;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Proposal = 
 record {
   id: nat;
   manifest: text;
   proposal_type: UserType;
   status: Status;
   voters: vec principal;
   votes: int;
 };
type Member = 
 record {
   age: opt nat;
   email: opt text;
   joinAs: UserType;
   name: text;
   userName: text;
 };
type ICDAO = 
 service {
   _balance: (principal) -> (nat);
   addMember: (Member) -> (Result);
   balanceOf: (Account) -> (nat) query;
   createProposal: (text) -> (CreateProposalResult);
   getAllMembers: () -> (vec Member) query;
   getMember: (principal) -> (Result_1) query;
   getOrgMembers: () -> (vec Member) query;
   getProposal: (nat) -> (opt Proposal) query;
   getRegMembers: () -> (vec Member) query;
   getStats: () -> (DAOStats) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   isOrg: (principal) -> (bool) query;
   mint: (principal, nat) -> ();
   numberOfMembers: () -> (nat) query;
   removeMember: () -> (Result);
   tokenName: () -> (text) query;
   tokenSymbol: () -> (text) query;
   totalSupply: () -> (nat) query;
   transfer: (Account, Account, nat) -> (Result);
   updateMember: (Member) -> (Result);
   vote: (nat, bool) -> (voteResult);
   whoami: () -> (principal) query;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type DAOStats = 
 record {
   goals: vec text;
   logo: text;
   manifesto: text;
   member: vec text;
   name: text;
   numberOfMembers: nat;
 };
type CreateProposalResult = 
 variant {
   err: CreateProposalErr;
   ok: CreateProposalOk;
 };
type CreateProposalOk = nat;
type CreateProposalErr = 
 variant {
   NotDAOMember;
   NotEnoughTokens;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : () -> ICDAO
